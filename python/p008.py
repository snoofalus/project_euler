# -----------------------------------------------------------
# project euler problem 8
#
# Torjus Nilsen, Kongsberg, Norway
# email tornil1996@hotmail.com
# -----------------------------------------------------------

import numpy as np

###
# PROBLEM DEFINITION
###

# The four adjacent digits in the 1000-digit number that have the greatest
# product are 9 × 9 × 8 × 9 = 5832.

# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450

# Find the thirteen adjacent digits in the 1000-digit number that have the
# greatest product. What is the value of this product?


###
# IDEAS
###

# Find product of first 13 digits, then iteratively move through the 
# number block.


###
# SOLUTION
###

original_block = '731671765313306249192251196744265747423553491949349698\
35203127745063262395783180169848018694788518438586156078911294949545950\
17379583319528532088055111254069874715852386305071569329096329522744304\
35576689664895044524452316173185640309871112172238311362229893423380308\
13533627661428280644448664523874930358907296290491560440772390713810515\
85930796086670172427121883998797908792274921901699720888093776657273330\
01053367881220235421809751254540594752243525849077116705560136048395864\
46706324415722155397536978179778461740649551492908625693219784686224828\
39722413756570560574902614079729686524145351004748216637048440319989000\
88952434506585412275886668811642717147992444292823086346567481391912316\
28245861786645835912456652947654568284891288314260769004224219022671055\
62632111110937054421750694165896040807198403850962455444362981230987879\
92724428490918884580156166097919133875499200524063689912560717606058861\
16467109405077541002256983155200055935729725716362695618826704282524836\
00823257530420752963450'

adjacent_digits = 13

#print(len(original_block))

def split_string_to_digits(my_string):

	lst_digits = [int(char) for char in my_string]

	return lst_digits

def main(original_block, adjacent_digits):

	#init greatest_digits and greatest_product

	greatest_digits = []
	greatest_product = 0

	#iterate over all 13 digit strings
	for i in range(len(original_block) - adjacent_digits):

		str_current_adjacent = original_block[i:(i + adjacent_digits)]
		lst_current_adjacent = split_string_to_digits(str_current_adjacent)

		current_product = np.product(lst_current_adjacent)

		if current_product > greatest_product:

			greatest_digits = lst_current_adjacent
			greatest_product = current_product


	return greatest_digits, greatest_product

greatest_digits, greatest_product = main(original_block, adjacent_digits)

print('Greatest digits: [{}]'.format(greatest_digits))
print('Greatest product: [{}]'.format(greatest_product))